// main will be always my entry point in huff
// we dont have functions we have macros
// we do always `#define macro <name_of_the_macro> = takes() returns() {}`
// we compile with `huffc <file_path>` with no outputs it means it compiles
// or `huffc <file_path> -b` and we get as output the bytecode
// or `huffc <file_path> --bin-runtime` and we get as output the runtime code
// And use it in https://www.evm.codes/playground and see the opcodes we have here

/* Interface */
// Here I define functions as in solidity to use some huff sugar syntax
#define function updateHorseNumber(uint256) nonpayable returns ()
#define function readNumberOfHorses() view returns (uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() //This will allocate a storage slot for the number of horses, by default the next free storage slot

#define macro MAIN() = takes(0) returns(0) {
    // We can write PUSH 0 0x00 or 0x00
    0x00                   // [0]
    calldataload           // [calldataload 32 bytes]   
    // How do we cutdown the calldata -> func selector
    // Use the opcode shift right to do that. Have to count all the 0 in the 
    // calldata this is the function selector. 56 ceros / 2 = 28 bytes, or 224 bits
    // Write in the terminal `cast to-base 224 hex` the output is 0xe0
    0xe0                   // or PUSH1 0xe0. My stack is now [0xe0, calldata (32bytes)]
    shr                    // shift to the right, the times from the latest on stack. My stack is now [func_selector]
    // Now that we hace the function selector on stack we can do some function dispatching

    // Jump -> function data associated with the selector
    // if function_selector is updateHorseNumber jump to that function
    // if function_selector is readNumberOfHorses jump to that function
    // To get the signatures write in terminal `cast sig "updateHorseNumber(uint256)"`, `cast sig "readNumberOfHorses()"`
    // 0xcdfead2e => updateHorseNumber()
    // 0xe026c017 => readNumberOfHorses()

    dup1                     // [func_selector, func_selector] this duplicates the top of the stack
    // We can push the selector on stack and compare with opcode eq
    // 0xcdfead2e               // [0xcdfead2e, func_selector, func_selector]
    // Instead of doing it with the selector we can use huff __FUNC_SIG() and will take the definition of the function from the interface
    __FUNC_SIG(updateHorseNumber) // [0xcdfead2e, func_selector]
    eq                       // [true if matches == 1/false if not == 0, func_selector]
    // jump to the updateHorseNumber function if true
    updateJump               // [updateHorseNumberProgramCounter, true/false conditional, func_selector]
    // Now use the opcode JUMPI to jump to the updateHorseNumber function. If the condition is true jump to the updateHorseNumber function
    jumpi                   // [func_selector] this deletes the stack
    // 0xe026c017              // [0xe026c017, func_selector]
    __FUNC_SIG(readNumberOfHorses) // [0xe026c017, func_selector]
    eq                      // [true if matches == 1/false if not == 0]
    readJump               // [readNumberOfHorsesProgramCounter, true/false conditional]
    jumpi                  // []

    // If we dont get a valid jump destination we revert. For now only put on stack [0,0] and then revert
    // revert will empty the stacl
    0x00 0x00 revert                 // []

    // This are my valids jump destinations
    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the value to store from calldata
    0x04                   // [0x04] // This is the offset of the value in the calldata (4 bytes, corresponds to the 4 bytes of the function selector)
    calldataload           // [input_value] // This loads the value from the calldata
    // 2. Give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]         // [storage_slot, input_value] This is the storage slot where we will store the number of horses
    // 3. sstore opcode
    sstore                 // [] // This stores the value in the storage slot
    stop                  // [] // This stops the execution, if not the code will continue executing with the next line. It cost zero gas
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]         // [storage_slot]
    // 2. Load the value 
    sload                  // [value]
    // 3. Stick it into memory
    0x00                 // [0x00, value]
    mstore              // [] // This stores the value in memory Memory: [value]
    // 4. Return the value
    // 0x20 == 32 bytes `cast --to-base 0x20 dec`
    0x20 0x00          // We're going to have something 32 bytes long, at index 0 from memory. This is used for RETURN opcode
    return             // [] // This returns the value from memory. It works like STOP but it returns a value

}